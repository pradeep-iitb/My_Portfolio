{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pradeep Kumawat\\\\.vscode\\\\Web Dev\\\\AmazonClone1\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Export the context for direct usage\nexport { AuthContext };\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Check if user is logged in on app load\n  useEffect(() => {\n    checkAuth();\n  }, []);\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n        const response = await api.get('/auth/me');\n        if (response.data.success) {\n          setUser(response.data.user);\n          setIsAuthenticated(true);\n        } else {\n          // Token is invalid\n          localStorage.removeItem('token');\n          delete api.defaults.headers.common['Authorization'];\n        }\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      localStorage.removeItem('token');\n      delete api.defaults.headers.common['Authorization'];\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      if (response.data.success) {\n        const {\n          token,\n          user\n        } = response.data;\n\n        // Store token in localStorage\n        localStorage.setItem('token', token);\n\n        // Set authorization header\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n        // Update state\n        setUser(user);\n        setIsAuthenticated(true);\n        toast.success(`Welcome back, ${user.firstName}!`);\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      const response = await api.post('/auth/register', userData);\n      if (response.data.success) {\n        const {\n          token,\n          user\n        } = response.data;\n\n        // Store token in localStorage\n        localStorage.setItem('token', token);\n\n        // Set authorization header\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n        // Update state\n        setUser(user);\n        setIsAuthenticated(true);\n        toast.success(`Welcome to Amazon Clone, ${user.firstName}!`);\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const message = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Registration failed';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      await api.post('/auth/logout');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Clear local storage and state regardless of API call success\n      localStorage.removeItem('token');\n      delete api.defaults.headers.common['Authorization'];\n      setUser(null);\n      setIsAuthenticated(false);\n      toast.success('Logged out successfully');\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      const response = await api.put('/auth/profile', profileData);\n      if (response.data.success) {\n        setUser(response.data.user);\n        toast.success('Profile updated successfully');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const message = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Profile update failed';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      const response = await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      if (response.data.success) {\n        toast.success('Password changed successfully');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const message = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Password change failed';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n  const addAddress = async addressData => {\n    try {\n      const response = await api.post('/auth/addresses', addressData);\n      if (response.data.success) {\n        // Update user with new addresses\n        setUser(prev => ({\n          ...prev,\n          addresses: response.data.addresses\n        }));\n        toast.success('Address added successfully');\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const message = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to add address';\n      toast.error(message);\n      return {\n        success: false,\n        message\n      };\n    }\n  };\n  const refreshUser = async () => {\n    try {\n      const response = await api.get('/auth/me');\n      if (response.data.success) {\n        setUser(response.data.user);\n      }\n    } catch (error) {\n      console.error('Failed to refresh user:', error);\n    }\n  };\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    addAddress,\n    refreshUser,\n    checkAuth\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 208,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkAuth","token","localStorage","getItem","defaults","headers","common","response","get","data","success","removeItem","error","console","login","email","password","post","setItem","firstName","_error$response","_error$response$data","message","register","userData","_error$response2","_error$response2$data","logout","updateProfile","profileData","put","_error$response3","_error$response3$data","changePassword","currentPassword","newPassword","_error$response4","_error$response4$data","addAddress","addressData","prev","addresses","_error$response5","_error$response5$data","refreshUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Pradeep Kumawat/.vscode/Web Dev/AmazonClone1/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { toast } from 'react-hot-toast';\r\nimport api from '../utils/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\n// Export the context for direct usage\r\nexport { AuthContext };\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Check if user is logged in on app load\r\n  useEffect(() => {\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const checkAuth = async () => {\r\n    try {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        const response = await api.get('/auth/me');\r\n        \r\n        if (response.data.success) {\r\n          setUser(response.data.user);\r\n          setIsAuthenticated(true);\r\n        } else {\r\n          // Token is invalid\r\n          localStorage.removeItem('token');\r\n          delete api.defaults.headers.common['Authorization'];\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Auth check failed:', error);\r\n      localStorage.removeItem('token');\r\n      delete api.defaults.headers.common['Authorization'];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.post('/auth/login', { email, password });\r\n      \r\n      if (response.data.success) {\r\n        const { token, user } = response.data;\r\n        \r\n        // Store token in localStorage\r\n        localStorage.setItem('token', token);\r\n        \r\n        // Set authorization header\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        \r\n        // Update state\r\n        setUser(user);\r\n        setIsAuthenticated(true);\r\n        \r\n        toast.success(`Welcome back, ${user.firstName}!`);\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Login failed';\r\n      toast.error(message);\r\n      return { success: false, message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await api.post('/auth/register', userData);\r\n      \r\n      if (response.data.success) {\r\n        const { token, user } = response.data;\r\n        \r\n        // Store token in localStorage\r\n        localStorage.setItem('token', token);\r\n        \r\n        // Set authorization header\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        \r\n        // Update state\r\n        setUser(user);\r\n        setIsAuthenticated(true);\r\n        \r\n        toast.success(`Welcome to Amazon Clone, ${user.firstName}!`);\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Registration failed';\r\n      toast.error(message);\r\n      return { success: false, message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await api.post('/auth/logout');\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      // Clear local storage and state regardless of API call success\r\n      localStorage.removeItem('token');\r\n      delete api.defaults.headers.common['Authorization'];\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      toast.success('Logged out successfully');\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      const response = await api.put('/auth/profile', profileData);\r\n      \r\n      if (response.data.success) {\r\n        setUser(response.data.user);\r\n        toast.success('Profile updated successfully');\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Profile update failed';\r\n      toast.error(message);\r\n      return { success: false, message };\r\n    }\r\n  };\r\n\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      const response = await api.put('/auth/change-password', {\r\n        currentPassword,\r\n        newPassword\r\n      });\r\n      \r\n      if (response.data.success) {\r\n        toast.success('Password changed successfully');\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Password change failed';\r\n      toast.error(message);\r\n      return { success: false, message };\r\n    }\r\n  };\r\n\r\n  const addAddress = async (addressData) => {\r\n    try {\r\n      const response = await api.post('/auth/addresses', addressData);\r\n      \r\n      if (response.data.success) {\r\n        // Update user with new addresses\r\n        setUser(prev => ({\r\n          ...prev,\r\n          addresses: response.data.addresses\r\n        }));\r\n        toast.success('Address added successfully');\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      const message = error.response?.data?.message || 'Failed to add address';\r\n      toast.error(message);\r\n      return { success: false, message };\r\n    }\r\n  };\r\n\r\n  const refreshUser = async () => {\r\n    try {\r\n      const response = await api.get('/auth/me');\r\n      if (response.data.success) {\r\n        setUser(response.data.user);\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to refresh user:', error);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    isAuthenticated,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateProfile,\r\n    changePassword,\r\n    addAddress,\r\n    refreshUser,\r\n    checkAuth\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}